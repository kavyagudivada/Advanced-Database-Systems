
Name:Kavya Sri Gudivada
Last 4 digits ID: 6005

CSE 6331, Cloud Computing					

Quiz Q3, 3.30, Summer 2020   (c) DL, UTA, 2020


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.

 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     ANY VIOLATIONS to scholastic honesty, which include working with others during this quiz, communicating with others during
     this quiz, giving anyone or recieving from anyone any information during this quiz or for the next 6 hours after completion
     of this quiz is a honors violation and will result in a -100 points being assessed for this quiz and being reported. 

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please send the link, raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     _____________KSG____

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4a. Using the cloud services provider, all functionality possible should be implemented on that provider.
     (Of course, displaying web pages through a browser and the user interface is "local")

 4b. Upload all data files (*csv, not this quiz) to cloud service. 
  
Show and submit code, when each part is complete, raise your hand and then show us:

 To recieve credit you MUST show (demo) AND submit the code (text only) on Canvas.

  5. Show a web page and interface (which resides on the cloud provider) with your name,
     and below that, Student ID at the top of every web page dispayed 
     (for this quiz). 
     Please use a large font.
    
     The cloud service providers are IBM Cloud (BlueMix), Microsoft Azure, Amazon AWS. You may use any you wish.

    Import the datasets into a Relational Data Base (SQL), if you have already done this, (briefly) explain/describe
    how you did this. Please note that for some parts of the following you will need to create indexes (keys)
    appropriately.
EQTDPNYM
 <div class="jumbotron">
        <h1>Kavya Sri Gudivada</h1>
        <H1>1001766005</H1>
    </div>

  6. Allow a user, through a web form, to give a nst range (for example 80 to 85), and show us the matching result tuples
     for that request. (Show nst, lat, long, place, mag, id)
     Show us the time taken to perform that operation.

question6
<p>

 <form action="/multiplerun123" method="get">
	nst from<input type="text" name="rangefrom" maxlength="200" width="60"> <br/>
 	nst Range to<input type="text" name="rangeto" maxlength="200" width="60"><br/>

   <input type="submit" value="n times"><br/><br/>
</form>
</p>

@app.route('/multiplerun123', methods=['GET'])  # without redis/memcache extract
def randquery123():
    rangfro = float(request.args.get('rangefrom'))
    rangto = float(request.args.get('rangeto'))

    return randrange_time(rangfro, rangto)

def randrange_time(rangfro, rangto):
    dbconn = pypyodbc.connect(
        'DRIVER=' + driver + ';SERVER=' + server + ';PORT=1433;DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
    cursor = dbconn.cursor()
    start = time.time()
    timeq = []
    mag1_li = []
    mag2_li = []
    time_li = []
    final = []

    success = 'SELECT tabq.nst, tabl.latitude, tabl.longitude, tabl.place, tabq.mag, tabq.id from tabl, tabq where tabl.id=tabq.id and nst BETWEEN '+ str(rangfro) + ' and ' + str(rangto) + ';'
    # Do MySQL query
    print("Execution failed")
    cursor.execute(success)
    data = cursor.fetchall()
    rows = []
    row_count = 0
    for j in data:
        print(j)
        row_count = j
        rows.append(str(j))
        new_row = rows
    first_time = time.time()
    first_execute = first_time - start
    timeq.append(first_execute)
    check123 =  "The time is " + str(first_execute) + "The count is " + str(row_count)
    final.append(check123)
    print(first_execute)

    # print(new_row)
    # print ("Hello")

    cursor.execute(success)
    print("Step4")
    # print(rows)
    end = time.time()
    exectime = end - start
    return render_template('count123.html', t=final, u=mag2_li, s=timeq, ci=rows, en=exectime)

  7. Allow a user to give a nst range (for example 80 to 85), and you will generate a random select within that nst range,
     select all quakes with that nst value, show us the result, as in the previous question.
     Show us the nst value generated, then show the results.
     Show us the time taken to perform that operation.
question7
<p>

 <form action="/multiplerun7" method="get">
	nst from<input type="text" name="rangefrom" maxlength="200" width="60"> <br/>
 	nst Range to<input type="text" name="rangeto" maxlength="200" width="60"><br/>

   <input type="submit" value="n times"><br/><br/>
</form>
</p>

@app.route('/multiplerun7', methods=['GET'])  # without redis/memcache extract
def randquery7():
    rangfro = float(request.args.get('rangefrom'))
    rangto = float(request.args.get('rangeto'))

    return randrange_time7(rangfro, rangto)

def randrange_time7(rangfro, rangto):
    dbconn = pypyodbc.connect(
        'DRIVER=' + driver + ';SERVER=' + server + ';PORT=1433;DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
    cursor = dbconn.cursor()
    start = time.time()
    timeq = []
    mag1_li = []
    mag2_li = []
    time_li = []
    final = []
    magic=int(random.randint(rangfro,rangto))
    success = 'SELECT tabq.nst, tabl.latitude, tabl.longitude, tabl.place, tabq.mag, tabq.id from tabl, tabq where tabl.id=tabq.id and nst = '+ str(magic) +';'
    # Do MySQL query
    print("Execution failed")
    cursor.execute(success)
    data = cursor.fetchall()
    rows = []
    row_count = 0
    for j in data:
        print(j)
        row_count = j
        rows.append(str(j))
        new_row = rows
    first_time = time.time()
    first_execute = first_time - start
    timeq.append(first_execute)
    check123 =  " The time is " + str(first_execute) + "The data is " + str(row_count)
    final.append(check123)
    print(first_execute)

    # print(new_row)
    # print ("Hello")

    cursor.execute(success)
    print("Step4")
    # print(rows)
    end = time.time()
    exectime = end - start
    return render_template('count123.html', t=final, u=mag2_li, s=timeq, ci=rows, en=exectime,ma=magic)

     
  8. Modify part 7, to allow a value N (up to 500), and repeat the selections N times.
     Show time taken for each, and for all operations.
question8
<p>

 <form action="/multiplerun8" method="get">
	nst from<input type="text" name="rangefrom" maxlength="200" width="60"> <br/>
 	nst Range to<input type="text" name="rangeto" maxlength="200" width="60"><br/>
     Number of queries to run:<input type="text" name="nom" maxlength="200" width="60"></br>


   <input type="submit" value="n times"><br/><br/>
</form>
</p>


@app.route('/multiplerun8', methods=['GET'])  # without redis/memcache extract
def randquery8():
    rangfro = float(request.args.get('rangefrom'))
    rangto = float(request.args.get('rangeto'))
    num = int(request.args.get('nom'))

    return randrange_time8(rangfro, rangto,num)

def randrange_time8(rangfro, rangto, num):
    dbconn = pypyodbc.connect(
        'DRIVER=' + driver + ';SERVER=' + server + ';PORT=1433;DATABASE=' + database + ';UID=' + username + ';PWD=' + password)
    cursor = dbconn.cursor()
    start = time.time()
    timeq = []
    mag1_li = []
    mag2_li = []
    time_li = []
    final = []
    for i in range(0, int(num)):
        magic = int(random.randint(rangfro, rangto))
        success = 'SELECT tabq.nst, tabl.latitude, tabl.longitude, tabl.place, tabq.mag, tabq.id from tabl, tabq where tabl.id=tabq.id and nst = ' + str(magic) + ';'



        # if (r.get(key)):
        #     print("redis cached")
        # else:

        # Do MySQL query
        print("Execution failed")
        cursor.execute(success)
        data = cursor.fetchall()
        rows = []
        for j in data:
            print(j)
            row_count = j
            rows.append(str(j))
            new_row = rows
        # Put data into cache for 1 hour


        # if (i < 1):
        first_time = time.time()
        first_execute = first_time - start
        timeq.append(first_execute)
        check123 =  " The time is " + str(first_execute) + "The count is " + str(row_count)
        final.append(check123)
        print(first_execute)

        # print(new_row)
        # print ("Hello")

        cursor.execute(success)
    print("Step4")
    # print(rows)
    end = time.time()
    exectime = end - start
    return render_template('count.html', t=final, u=mag2_li, s=timeq, ci=rows, en=exectime)




  9. Repeat 8. using an in-memory caching mechanism (NOT an in-memory database) repeat the previous step, then show us.

  10. Show us, in a link, the application running and we will try it out. Only for parts 6, 7, 8, 9

  11. When complete, return (send) this quiz
      If you finish early, send this immediately, otherwise send between
      the end of class and no more than 1 minute after that.

